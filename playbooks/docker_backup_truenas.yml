# ===============================================================================
# 🧠 Goug's HomeLab Ansible Playbook
# -------------------------------------------------------------------------------
# 📦 Playbook Name  : Backup Docker on TureNAS hosts
# 🗓️ Run Schedule   : Daily
# 🔧 Description    : Backup Docker containers on TrueNAS hosts.
#
# 🔐 Required Secure Variables (do NOT store in GitHub):
#   - docker_share  → Docker share location to backup containers
#   - docker_dir    → Absolute path where Docker containers are stored e.g. (/home/user/docker)
#
# ✅ These must be provided via Ansible Vault, Semaphore Variables/Secrets, or CI/CD env vars.
# ❌ Never store actual values in this file or in version control.
#
# GitHub Repo  : https://github.com/goug76/Home-Lab-Ansible
# Maintainer   : John Goughenour
# ===============================================================================

---
- name: Backup Docker on TrueNAS host
  hosts: truenas
  become: yes
  vars:
    docker_dir: "{{ docker_dir }}"
    backup_dir: "{{ docker_share }}"
    timestamp: "{{ ansible_date_time.date }}_{{ ansible_date_time.time | regex_replace(':', '') }}"
    hostname: "{{ ansible_hostname | lower }}"
  tasks:
    - name: Prune unused Docker images
      command: docker image prune -af
      register: prune_result
      changed_when: prune_result.rc == 0

    - name: Stop all Docker containers
      shell: docker stop $(docker ps -q)
      ignore_errors: yes

    - name: Create backup archive
      archive:
        path: "{{ docker_dir }}"
        dest: "{{ backup_dir }}/docker_backup_{{ hostname }}_{{ timestamp }}.zip"
        format: zip

    - name: Start all Docker containers
      shell: docker start $(docker ps -a -q)
      ignore_errors: yes

    - name: Find all backup files for this host
      find:
        paths: "{{ backup_dir }}"
        patterns: "docker_backup_{{ hostname }}_*.zip"
        recurse: no
        file_type: file
      register: all_backups

    - name: Sort backups by mtime (modification time)
      set_fact:
        sorted_backups: "{{ all_backups.files | sort(attribute='mtime', reverse=true) }}"

    - name: Debug found backup files (optional)
      debug:
        msg: "{{ item.path }}"
      loop: "{{ sorted_backups }}"
      when: sorted_backups | length > 3

    - name: Remove older backups, keeping only the 3 most recent
      file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ sorted_backups[3:] }}"
      when: sorted_backups | length > 3