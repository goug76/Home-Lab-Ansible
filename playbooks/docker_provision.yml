---
- name: Docker Provisioning
  hosts: all
  become: true

  tasks:
    - name: Install required system packages
      ansible.builtin.apt:
        pkg:
          - git
        state: latest
        update_cache: true

    - name: Add Docker GPG apt Key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      ansible.builtin.apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Install Docker-ce
      ansible.builtin.apt:
        pkg:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: latest
        update_cache: true

    - name: Install Docker Module for Python
      ansible.builtin.pip:
        name: docker

    - name: Add Docker group
      ansible.builtin.group:
        name: docker
        state: present

    - name: Add user to Docker group
      ansible.builtin.user:
        name: "{{ user }}"
        groups: docker
        append: true

    - name: Clone the Docker Repository
      ansible.builtin.git:
        repo: https://github.com/{{ user }}/docker.git
        dest: /home/{{ user }}/
        single_branch: yes
        version: main

    - name: Make the initialization script executable
      ansible.builtin.shell:
        cmd: chmod 700 initialization.sh
        chdir: /home/{{ user }}/docker

    - name: Execute initialization script
      ansible.builtin.shell: initialization.sh >> logs/initialization.log
      args:
        chdir: /home/{{ user }}/docker

    - name: Add the GIT Repository Token
      ansible.builtin.shell:
        cmd: git remote set-url origin https://{{git_token}}@github.com/{{ user }}/docker
        chdir: /home/{{ user }}/docker

    - name: Check if reboot required
      ansible.builtin.stat:
        path: /var/run/reboot-required
      register: reboot_required_file

    - name: Reboot if required
      ansible.builtin.reboot:
      when: reboot_required_file.stat.exists == true