# ===============================================================================
# üß† Goug's HomeLab Ansible Playbook
# -------------------------------------------------------------------------------
# üì¶ Playbook Name  : Ubuntu Provisioning
# üóìÔ∏è Run Schedule   : N/A
# üîß Description    : Initial setup for Ubuntu servers installs core packages, setsup and enables firewall
#                       setsup Cockpit and reboots the server if necessary.
#
# üîê Required Secure Variables (do NOT store in GitHub):
#   - NONE
#
# ‚úÖ These must be provided via Ansible Vault, Semaphore Variables/Secrets, or CI/CD env vars.
# ‚ùå Never store actual values in this file or in version control.
#
# GitHub Repo  : https://github.com/goug76/Home-Lab-Ansible
# Maintainer   : John Goughenour
# ===============================================================================

---
- name: Ubuntu Provisioning
  hosts: new_device
  become: true

  tasks:
    - name: Install required system packages
      ansible.builtin.apt:
        pkg:
          - qemu-guest-agent
          - network-manager
          - apt-transport-https
          - ca-certificates
          - software-properties-common
          - python3-pip
          - virtualenv
          - python3-setuptools
          - gnupg
          - acl
          - whois
          - apache2-utils
          - nfs-common
          - cifs-utils
          - linux-generic
          - unzip
          - zip
          - cockpit
          - cockpit-pcp
          - packagekit
          - keepalived
        state: latest
        update_cache: true
    
    - name: Deny all incoming traffic
      ufw:
        default: deny
        direction : incoming

    - name: Allow all outgoing traffic
      ufw:
        default: allow
        direction : outgoing

    - name: Allow all incoming local traffic
      ufw:
        rule: allow
        direction : in
        src: "{{item}}"
      loop:
        - '172.16.0.0/12'
        - '192.168.0.0/16'

    - name: Allow OpenSSH traffic
      ufw:
        rule: allow
        name: OpenSSH

    - name: Enable UFW Firewall
      ufw:
        state: enabled

    - name: Enable Cockpit
      ansible.builtin.systemd_service:
        name: cockpit.socket
        state: started
        enabled: true
    
    - name: Add Cockpit modules
      ansible.builtin.apt:
        deb: "{{ item.url }}"
      loop:
        - url: https://github.com/45Drives/cockpit-navigator/releases/download/v0.5.10/cockpit-navigator_0.5.10-1focal_all.deb
        - url: https://github.com/45Drives/cockpit-identities/releases/download/v0.1.12/cockpit-identities_0.1.12-1focal_all.deb

    - name: Create secure Netplan file for NetworkManager
      copy:
        dest: /etc/netplan/01-network-manager.yaml
        content: |
          network:
            version: 2
            renderer: NetworkManager
            ethernets:
              {{ ansible_default_ipv4.interface }}:
                dhcp4: true
        owner: root
        group: root
        mode: '0600'

    - name: Apply Netplan configuration
      command: netplan apply

    - name: Enable and start NetworkManager
      systemd:
        name: NetworkManager
        enabled: true
        state: started

    - name: Ensure PackageKit is running
      systemd:
        name: packagekit
        enabled: true
        state: started

    - name: Restart Cockpit service
      systemd:
        name: cockpit
        state: restarted
      
    - name: Disable and stop systemd-networkd-wait-online service
      systemd:
        name: systemd-networkd-wait-online.service
        enabled: false
        state: stopped
        masked: true

    - name: Check if /var/run/reboot-required exists (Debian/Ubuntu)
      ansible.builtin.stat:
        path: /var/run/reboot-required
      register: reboot_required_ubuntu

    - name: Check if /var/run/needrestart exists (Raspberry Pi OS)
      ansible.builtin.stat:
        path: /var/run/needrestart
      register: reboot_required_pi

    - name: Set reboot_required to true if any indicator exists
      ansible.builtin.set_fact:
        reboot_required: true
      when: reboot_required_ubuntu.stat.exists or reboot_required_pi.stat.exists

    - name: Show message about reboot
      ansible.builtin.debug:
        msg: "System requires reboot. Proceeding with reboot..."
      when: reboot_required | default(false)

    - name: Reboot the system if needed
      ansible.builtin.reboot:
        msg: "Reboot initiated by Goug's HomeLab Ansible playbook"
        pre_reboot_delay: 10          # Give services a moment to settle
        post_reboot_delay: 30         # Extra wait time after host is back
        reboot_timeout: 600           # Increase timeout for slower booting devices
        test_command: uptime          # Command to verify host is back
      when: reboot_required | default(false)